# Setting up intellij to use a JDK installed by homebrew:
# homebrew install openjdk
# Launch Intellj and open project folder
# When a JDK is not detected:
    Go to File -> Project Structure
    In SDK option, add an SDK
    Use the following path to the SDK:
        /opt/homebrew/opt/openjdk/libexec/openjdk.jdk/Contents/Home

# Run single test. Where "min/max" identifies a test containing this substring
sbt 'testOnly *KeyValueObjectReaderSuite -- -z min/max'

# New testing approach

sbt compile; rm -r local/node_*
./t bootstrap local/cfg.yaml

sudo launchctl start com.apple.rpcbind
./t nfs local/cfg.yaml local/log4j-conf.xml

# Building for demo appliction
# run "sbt pack"
# then invoke ./target/pack/bin/demo

sbt compile && rm -r local/node_* && ./t bootstrap local/cfg.yaml

./t node local/t.yaml node_a

./t  nfs local/t.yaml local/amoeba-log4j.yaml

Bootstrap Procedure:
    sbt pack
    rm -r ~/temp/aspen/*
    rm -r local/*log
    ./target/pack/bin/demo bootstrap local/t.yaml
    emacs local/cfg.yaml
    ./target/pack/bin/demo amoeba local/cfg.yaml local/amoeba-log4j.yaml

  For each node:
    ./target/pack/bin/demo node local/cfg.yaml node_a

  On client:
    umount -f /mnt; mount -v -t nfs4 -o "vers=4.1" 192.168.56.1:/ /mnt


NFS Cache Clearing:
  # To free pagecache
  echo 1 > /proc/sys/vm/drop_caches

  # To free dentries and inodes
  echo 2 > /proc/sys/vm/drop_caches

  # To free pagecache, dentries and inodes
  echo 3 > /proc/sys/vm/drop_caches


Pre sbt-pack demo launch script:
#!/bin/bash

# The CLASSPATH content is generated by sbt via running the "export runtime:fullClasspath" command
#
export CLASSPATH="<sbt content>"

exec java -cp $CLASSPATH com.ibm.aspen.demo.Main "$@"

---------------------------------------------------------------------------
- TODO
KeyRevisionGuard
    - Add Zeroed DoesNotExist variable
    - Test for zeroed UUID in Tx, use this for does not exist requirement

Transaction Finalizers
    - Improve error handling
    - Move to dedicated registry rather than the generic one
        - Should be argument to AmoebaClient for user-defined FAs
    - Consider moving this registry to Server side only. That's where they're used

AllocationDriver
    - Detect stalled allocations and force commit failure
    - Recover from successful completions

SimpleCRL
    Problem if LogEntry exceeds the Maximum stream size. Can modify LogEntry to skip writes until its size
    is once again less than the size of a log file. Need to allow tx/alloc deletes to remove entries from
    the LogEntry.
    - Move completionHandler into the LogContent base class
    - Iterate over all Tx and Alloc to call completion handlers
    - Modify LogEntry to remove Tx and Alloc instances when deletions are made

FIXME - When setting Maximum on KeyValue object, we must check to ensure that no keys exceeding that
        maximum will be present when transaction ends. Must run through adds and deletes to local keys
        to determine this.
   |-> Prevents hole where KV additions are made after a read which results in a split. could leave
       behind keys with value > maximum


